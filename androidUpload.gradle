apply plugin: "maven-publish"
apply plugin: "com.jfrog.bintray"

project.group = rootProject.group
project.version = rootProject.version
project.description = "Ensure Android runtime permissions using annotations only."
ext {
    publicName = "Aaper"
    url = "https://github.com/LikeTheSalad/aaper"
    vcsUrl = "https://github.com/LikeTheSalad/aaper.git"
    issueTrackerUrl = "https://github.com/LikeTheSalad/aaper/issues"
    tags = ['android', 'runtime', 'permissions', 'annotations', 'aaper']
}

task androidJavadocs {
    group "reporting"
    description "Generates Javadoc."
}

android.libraryVariants.all { variant ->

    def task = project.tasks.create("generate${variant.name.capitalize()}Javadoc", Javadoc) {
        title "API Documentation (${project.version})"
        group "doc"
        description "Generates Javadoc for $variant.name."

        // Source files from the variant
        source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i }

        // To fix issue: Error: Can not create variant 'android-lint' after configuration ': library: debugRuntimeElements' has been resolved
        doFirst {
            classpath = project.files(variant.javaCompileProvider.get().classpath.files,
                    project.android.getBootClasspath())
        }

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        exclude "**/R"
        exclude "**/R.**"
        exclude "**/R\$**"
        exclude "**/BuildConfig*"

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        options.windowTitle = "API Documentation (${project.version})"
        options.memberLevel = JavadocMemberLevel.PROTECTED
        options.linkSource false
        options.author = false

        failOnError true
    }

    task.dependsOn "assemble${variant.name.capitalize()}"
    androidJavadocs.dependsOn task
}

afterEvaluate {

    task androidJavadocsJar(type: Jar) {
        archiveClassifier.set('javadoc')
        from generateReleaseJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.srcDirs
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                version = project.version

                artifact androidJavadocsJar
                artifact androidSourcesJar
                from components.release

                pom {
                    name = project.publicName
                    description = project.description
                    url = project.url
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'https://opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id = 'LikeTheSalad'
                            name = 'Cesar Munoz'
                            email = 'likethesalad@gmail.com'
                        }
                    }
                    scm {
                        url = project.url
                    }
                }
            }
        }
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        publications = ['maven']
        pkg {
            repo = 'public-repo'
            name = project.name
            licenses = ['MIT']
            desc = project.description
            websiteUrl = project.url
            issueTrackerUrl = project.issueTrackerUrl
            vcsUrl = project.vcsUrl
            labels = project.tags
            publicDownloadNumbers = true
            version {
                name = project.version
                gpg {
                    sign = true
                    passphrase = project.hasProperty('passphrase') ? project.property('passphrase') : System.getenv('PASSPHRASE')
                }
            }
        }
    }

}